
    

  

<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <script type="text/javascript">var NREUMQ=[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script>
        <title>dist/less-1.1.4.min.js at master from cloudhead/less.js - GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />

    
    

    <meta content="authenticity_token" name="csrf-param" />
<meta content="3db8391479ce23aef2c10a52848cceec872e97eb" name="csrf-token" />

    <link href="https://a248.e.akamai.net/assets.github.com/stylesheets/bundle_github.css?61d264902f4e4b6302587c25053441029dc951fd" media="screen" rel="stylesheet" type="text/css" />
    

    <script src="https://a248.e.akamai.net/assets.github.com/javascripts/bundle_jquery.js?05576a4333d53119fdd7574e01ba174f2c5331f9" type="text/javascript"></script>

    <script src="https://a248.e.akamai.net/assets.github.com/javascripts/bundle_github.js?cd553d58ab32f68e12356654f32224ebba5fb7bd" type="text/javascript"></script>

    

    
  <link rel='permalink' href='/cloudhead/less.js/blob/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525/dist/less-1.1.4.min.js'>

  <link href="https://github.com/cloudhead/less.js/commits/master.atom" rel="alternate" title="Recent Commits to less.js:master" type="application/atom+xml" />

    

    <meta name="description" content="less.js - Leaner CSS, in your browser." />
  

        <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-3769691-2']);
      _gaq.push(['_setDomainName', 'none']);
      _gaq.push(['_trackPageview']);
      _gaq.push(['_trackPageLoadTime']);
      (function() {
        var ga = document.createElement('script');
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        ga.setAttribute('async', 'true');
        document.documentElement.firstChild.appendChild(ga);
      })();
    </script>

  </head>

  

  <body class="logged_out page-blob linux env-production">
    

    

    

    <div class="subnavd" id="main">
      <div id="header" class="true">
          <a class="logo" href="https://github.com">
            <img alt="github" class="default svg" height="45" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6.svg" />
            <img alt="github" class="default png" height="45" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6.png" />
            <!--[if (gt IE 8)|!(IE)]><!-->
            <img alt="github" class="hover svg" height="45" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6-hover.svg" />
            <img alt="github" class="hover png" height="45" src="https://a248.e.akamai.net/assets.github.com/images/modules/header/logov6-hover.png" />
            <!--<![endif]-->
          </a>

        
        <div class="topsearch">
  
    <!--
      make sure to use fully qualified URLs here since this nav
      is used on error pages on other domains
    -->
    <ul class="nav logged_out">
      
      <li class="pricing"><a href="https://github.com/plans">Pricing and Signup</a></li>
      
      <li class="explore"><a href="https://github.com/explore">Explore GitHub</a></li>
      <li class="features"><a href="https://github.com/features">Features</a></li>
      
      <li class="blog"><a href="https://github.com/blog">Blog</a></li>
      
      <li class="login"><a href="https://github.com/login?return_to=%2Fcloudhead%2Fless.js%2Fblob%2Fmaster%2Fdist%2Fless-1.1.4.min.js">Login</a></li>
    </ul>
  
</div>

      </div>

      
      
        
    <div class="site">
      <div class="pagehead repohead vis-public    instapaper_ignore readability-menu">

      

      <div class="title-actions-bar">
        <h1>
          <a href="/cloudhead">cloudhead</a> /
          <strong><a href="/cloudhead/less.js" class="js-current-repository">less.js</a></strong>
          
          
        </h1>

        
    <ul class="actions">
      

      
        
        <li>
          
            <a href="/cloudhead/less.js/toggle_watch" class="minibutton btn-watch watch-button" onclick="var f = document.createElement('form'); f.style.display = 'none'; this.parentNode.appendChild(f); f.method = 'POST'; f.action = this.href;var s = document.createElement('input'); s.setAttribute('type', 'hidden'); s.setAttribute('name', 'authenticity_token'); s.setAttribute('value', '3db8391479ce23aef2c10a52848cceec872e97eb'); f.appendChild(s);f.submit();return false;"><span><span class="icon"></span>Watch</span></a>
          
        </li>
        
          
            <li><a href="/cloudhead/less.js/fork" class="minibutton btn-fork fork-button" onclick="var f = document.createElement('form'); f.style.display = 'none'; this.parentNode.appendChild(f); f.method = 'POST'; f.action = this.href;var s = document.createElement('input'); s.setAttribute('type', 'hidden'); s.setAttribute('name', 'authenticity_token'); s.setAttribute('value', '3db8391479ce23aef2c10a52848cceec872e97eb'); f.appendChild(s);f.submit();return false;"><span><span class="icon"></span>Fork</span></a></li>
          

          
        
      
      
      <li class="repostats">
        <ul class="repo-stats">
          <li class="watchers ">
            <a href="/cloudhead/less.js/watchers" title="Watchers" class="tooltipped downwards">
              2,398
            </a>
          </li>
          <li class="forks">
            <a href="/cloudhead/less.js/network" title="Forks" class="tooltipped downwards">
              268
            </a>
          </li>
        </ul>
      </li>
    </ul>

      </div>

        
  <ul class="tabs">
    <li><a href="/cloudhead/less.js" class="selected" highlight="repo_source">Source</a></li>
    <li><a href="/cloudhead/less.js/commits/master" highlight="repo_commits">Commits</a></li>
    <li><a href="/cloudhead/less.js/network" highlight="repo_network">Network</a></li>
    <li><a href="/cloudhead/less.js/pulls" highlight="repo_pulls">Pull Requests (29)</a></li>

    

    
      
      <li><a href="/cloudhead/less.js/issues" highlight="issues">Issues (215)</a></li>
    

                <li><a href="/cloudhead/less.js/wiki" highlight="repo_wiki">Wiki (5)</a></li>
        
    <li><a href="/cloudhead/less.js/graphs" highlight="repo_graphs">Graphs</a></li>

    

    <li class="contextswitch nochoices">
      <span class="repo-tree toggle leftwards"
            
            data-master-branch="master"
            data-ref="master">
        <em>Branch:</em>
        <code>master</code>
      </span>
    </li>
  </ul>

  <div style="display:none" id="pl-description"><p><em class="placeholder">click here to add a description</em></p></div>
  <div style="display:none" id="pl-homepage"><p><em class="placeholder">click here to add a homepage</em></p></div>

  <div class="subnav-bar">
  
  <ul>
    <li>
      <a href="/cloudhead/less.js/branches" class="dropdown">Switch Branches (1)</a>
      <ul class="subnav-dropdown-branches">
                              <li><strong>master &#x2713;</strong></li>
            
      </ul>
    </li>
    <li>
      <a href="#" class="dropdown ">Switch Tags (1)</a>
              <ul class="subnav-dropdown-tags">
                      
              <li><a href="/cloudhead/less.js/blob/v1.0/dist/less-1.1.4.min.js">v1.0</a></li>
            
                  </ul>
      
    </li>
    <li>
    
    <a href="/cloudhead/less.js/branches" class="manage">Branch List</a>
    
    </li>
  </ul>
</div>

  
  
  
  
  
  



        
    <div id="repo_details" class="metabox clearfix">
      <div id="repo_details_loader" class="metabox-loader" style="display:none">Sending Request&hellip;</div>

      
        <a href="/cloudhead/less.js/downloads" class="download-source" data-facebox-url="/cloudhead/less.js/archives/master" id="download_button" title="Download source, tagged packages and binaries."><span class="icon"></span>Downloads</a>
      

      <div id="repository_desc_wrapper">
      <div id="repository_description" rel="repository_description_edit">
        
          <p>Leaner CSS, in your browser.
            <span id="read_more" style="display:none">&mdash; <a href="#readme">Read more</a></span>
          </p>
        
      </div>

      <div id="repository_description_edit" style="display:none;" class="inline-edit">
        <form action="/cloudhead/less.js/admin/update" method="post"><div style="margin:0;padding:0"><input name="authenticity_token" type="hidden" value="3db8391479ce23aef2c10a52848cceec872e97eb" /></div>
          <input type="hidden" name="field" value="repository_description">
          <input type="text" class="textfield" name="value" value="Leaner CSS, in your browser.">
          <div class="form-actions">
            <button class="minibutton"><span>Save</span></button> &nbsp; <a href="#" class="cancel">Cancel</a>
          </div>
        </form>
      </div>

      
      <div class="repository-homepage" id="repository_homepage" rel="repository_homepage_edit">
        <p><a href="http://lesscss.org" rel="nofollow">http://lesscss.org</a></p>
      </div>

      <div id="repository_homepage_edit" style="display:none;" class="inline-edit">
        <form action="/cloudhead/less.js/admin/update" method="post"><div style="margin:0;padding:0"><input name="authenticity_token" type="hidden" value="3db8391479ce23aef2c10a52848cceec872e97eb" /></div>
          <input type="hidden" name="field" value="repository_homepage">
          <input type="text" class="textfield" name="value" value="http://lesscss.org">
          <div class="form-actions">
            <button class="minibutton"><span>Save</span></button> &nbsp; <a href="#" class="cancel">Cancel</a>
          </div>
        </form>
      </div>
      </div>
      <div class="rule "></div>
      <div class="url-box">
  

  <ul class="clone-urls">
    
      
      <li class="http_clone_url"><a href="https://github.com/cloudhead/less.js.git" data-permissions="Read-Only">HTTP</a></li>
      <li class="public_clone_url"><a href="git://github.com/cloudhead/less.js.git" data-permissions="Read-Only">Git Read-Only</a></li>
    
    
  </ul>
  <input type="text" spellcheck="false" class="url-field" />
        <span style="display:none" id="clippy_2075" class="clippy-text"></span>
      <span id="clippy_tooltip_clippy_2075" class="clippy-tooltip tooltipped" title="copy to clipboard">
      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
              width="14"
              height="14"
              class="clippy"
              id="clippy" >
      <param name="movie" value="https://a248.e.akamai.net/assets.github.com/flash/clippy.swf?v5"/>
      <param name="allowScriptAccess" value="always" />
      <param name="quality" value="high" />
      <param name="scale" value="noscale" />
      <param NAME="FlashVars" value="id=clippy_2075&amp;copied=copied!&amp;copyto=copy to clipboard">
      <param name="bgcolor" value="#FFFFFF">
      <param name="wmode" value="opaque">
      <embed src="https://a248.e.akamai.net/assets.github.com/flash/clippy.swf?v5"
             width="14"
             height="14"
             name="clippy"
             quality="high"
             allowScriptAccess="always"
             type="application/x-shockwave-flash"
             pluginspage="http://www.macromedia.com/go/getflashplayer"
             FlashVars="id=clippy_2075&amp;copied=copied!&amp;copyto=copy to clipboard"
             bgcolor="#FFFFFF"
             wmode="opaque"
      />
      </object>
      </span>

  <p class="url-description"><strong>Read+Write</strong> access</p>
</div>

    </div>

    <div class="frame frame-center tree-finder" style="display:none" data-tree-list-url="/cloudhead/less.js/tree-list/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525" data-blob-url-prefix="/cloudhead/less.js/blob/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525">
      <div class="breadcrumb">
        <b><a href="/cloudhead/less.js">less.js</a></b> /
        <input class="tree-finder-input" type="text" name="query" autocomplete="off" spellcheck="false">
      </div>

      
        <div class="octotip">
          <p>
            <a href="/cloudhead/less.js/dismiss-tree-finder-help" class="dismiss js-dismiss-tree-list-help" title="Hide this notice forever">Dismiss</a>
            <strong>Octotip:</strong> You've activated the <em>file finder</em> by pressing <span class="kbd">t</span>
            Start typing to filter the file list. Use <span class="kbd badmono">↑</span> and <span class="kbd badmono">↓</span> to navigate,
            <span class="kbd">enter</span> to view files.
          </p>
        </div>
      

      <table class="tree-browser" cellpadding="0" cellspacing="0">
        <tr class="js-header"><th>&nbsp;</th><th>name</th></tr>
        <tr class="js-no-results no-results" style="display: none">
          <th colspan="2">No matching files</th>
        </tr>
        <tbody class="js-results-list">
        </tbody>
      </table>
    </div>

    <div id="jump-to-line" style="display:none">
      <h2>Jump to Line</h2>
      <form>
        <input class="textfield" type="text">
        <div class="full-button">
          <button type="submit" class="classy">
            <span>Go</span>
          </button>
        </div>
      </form>
    </div>


        

      </div><!-- /.pagehead -->

      

  













  <div class="commit commit-tease js-details-container">
  
  <p class="commit-title">
    <a href="/cloudhead/less.js/commit/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525">Merge pull request <a href="https://github.com/cloudhead/less.js/issues/388" title="Rhino" class="issue-link">#388</a> from erwan/rhino</a>
    <a href="javascript:;" class="minibutton expander-minibutton js-details-target"><span>…</span></a>
  </p>
  
    <div class="commit-desc"><pre>Rhino support</pre></div>
  
  <div class="commit-meta">
    <a href="/cloudhead/less.js/commit/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525" class="sha-block">commit <span class="sha">7739fb133a</span></a>

    <div class="authorship">
      
      <img src="https://secure.gravatar.com/avatar/38ddcefff0db3bd04a6fc06e31d1c01d?s=140&d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png" alt="" width="20" height="20" class="gravatar" />
      <span class="author-name"><a href="/cloudhead">cloudhead</a></span>
      authored <time class="js-relative-date" datetime="2011-09-15T04:36:33-07:00" title="2011-09-15 04:36:33">September 15, 2011</time>

      
    </div>
  </div>
</div>




  <div id="slider">

  

    <div class="breadcrumb" data-path="dist/less-1.1.4.min.js/">
      <b><a href="/cloudhead/less.js/tree/a3384fa922b55e00e9ad76d3fc6a1d23220721b6" class="js-rewrite-sha">less.js</a></b> / <a href="/cloudhead/less.js/tree/a3384fa922b55e00e9ad76d3fc6a1d23220721b6/dist" class="js-rewrite-sha">dist</a> / less-1.1.4.min.js       <span style="display:none" id="clippy_4363" class="clippy">dist/less-1.1.4.min.js</span>
      
      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
              width="110"
              height="14"
              class="clippy"
              id="clippy" >
      <param name="movie" value="https://a248.e.akamai.net/assets.github.com/flash/clippy.swf?v5"/>
      <param name="allowScriptAccess" value="always" />
      <param name="quality" value="high" />
      <param name="scale" value="noscale" />
      <param NAME="FlashVars" value="id=clippy_4363&amp;copied=copied!&amp;copyto=copy to clipboard">
      <param name="bgcolor" value="#FFFFFF">
      <param name="wmode" value="opaque">
      <embed src="https://a248.e.akamai.net/assets.github.com/flash/clippy.swf?v5"
             width="110"
             height="14"
             name="clippy"
             quality="high"
             allowScriptAccess="always"
             type="application/x-shockwave-flash"
             pluginspage="http://www.macromedia.com/go/getflashplayer"
             FlashVars="id=clippy_4363&amp;copied=copied!&amp;copyto=copy to clipboard"
             bgcolor="#FFFFFF"
             wmode="opaque"
      />
      </object>
      

    </div>

    <div class="frames">
      <div class="frame frame-center" data-path="dist/less-1.1.4.min.js/" data-permalink-url="/cloudhead/less.js/blob/a3384fa922b55e00e9ad76d3fc6a1d23220721b6/dist/less-1.1.4.min.js" data-title="dist/less-1.1.4.min.js at master from cloudhead/less.js - GitHub" data-type="blob">
        
          <ul class="big-actions">
            
            <li><a class="file-edit-link minibutton" href="/cloudhead/less.js/edit/__current_ref__/dist/less-1.1.4.min.js"><span>Edit this file</span></a></li>
          </ul>
        

        <div id="files">
          <div class="file">
            <div class="meta">
              <div class="info">
                <span class="icon"><img alt="Txt" height="16" src="https://a248.e.akamai.net/assets.github.com/images/icons/txt.png" width="16" /></span>
                <span class="mode" title="File Mode">100644</span>
                
                  <span>16 lines (16 sloc)</span>
                
                <span>35.348 kb</span>
              </div>
              <ul class="actions">
                <li><a href="/cloudhead/less.js/raw/master/dist/less-1.1.4.min.js" id="raw-url">raw</a></li>
                
                  <li><a href="/cloudhead/less.js/blame/master/dist/less-1.1.4.min.js">blame</a></li>
                
                <li><a href="/cloudhead/less.js/commits/master/dist/less-1.1.4.min.js">history</a></li>
              </ul>
            </div>
            
  <div class="data type-javascript">
    
      <table cellpadding="0" cellspacing="0" class="lines">
        <tr>
          <td>
            <pre class="line_numbers"><span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
</pre>
          </td>
          <td width="100%">
            
              
                <div class="highlight"><pre><div class='line' id='LC1'><span class="c1">//</span></div><div class='line' id='LC2'><span class="c1">// LESS - Leaner CSS v1.1.4</span></div><div class='line' id='LC3'><span class="c1">// http://lesscss.org</span></div><div class='line' id='LC4'><span class="c1">// </span></div><div class='line' id='LC5'><span class="c1">// Copyright (c) 2009-2011, Alexis Sellier</span></div><div class='line' id='LC6'><span class="c1">// Licensed under the Apache 2.0 License.</span></div><div class='line' id='LC7'><span class="c1">//</span></div><div class='line' id='LC8'><span class="c1">//</span></div><div class='line' id='LC9'><span class="c1">// LESS - Leaner CSS v1.1.4</span></div><div class='line' id='LC10'><span class="c1">// http://lesscss.org</span></div><div class='line' id='LC11'><span class="c1">// </span></div><div class='line' id='LC12'><span class="c1">// Copyright (c) 2009-2011, Alexis Sellier</span></div><div class='line' id='LC13'><span class="c1">// Licensed under the Apache 2.0 License.</span></div><div class='line' id='LC14'><span class="c1">//</span></div><div class='line' id='LC15'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&quot;less-error-message:&quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;&lt;ul&gt;&quot;</span><span class="p">,</span><span class="s1">&#39;&lt;li&gt;&lt;label&gt;[-1]&lt;/label&gt;&lt;pre class=&quot;ctx&quot;&gt;{0}&lt;/pre&gt;&lt;/li&gt;&#39;</span><span class="p">,</span><span class="s2">&quot;&lt;li&gt;&lt;label&gt;[0]&lt;/label&gt;&lt;pre&gt;{current}&lt;/pre&gt;&lt;/li&gt;&quot;</span><span class="p">,</span><span class="s1">&#39;&lt;li&gt;&lt;label&gt;[1]&lt;/label&gt;&lt;pre class=&quot;ctx&quot;&gt;{2}&lt;/pre&gt;&lt;/li&gt;&#39;</span><span class="p">,</span><span class="s2">&quot;&lt;/ul&gt;&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">),</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;less-error-message&quot;</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="s2">&quot;&lt;h3&gt;&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">message</span><span class="o">||</span><span class="s2">&quot;There is an error in your .less file&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;&lt;/h3&gt;&quot;</span><span class="o">+</span><span class="s1">&#39;&lt;p&gt;&lt;a href=&quot;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;&lt;/a&gt; &quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">extract</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="s2">&quot;on line &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">line</span><span class="o">+</span><span class="s2">&quot;, column &quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">column</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;:&lt;/p&gt;&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\[(-?\d)\]/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">line</span><span class="p">)</span><span class="o">+</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\{(\d)\}/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">c</span><span class="p">)]</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\{current\}/</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">column</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;span class=&quot;error&quot;&gt;&#39;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">column</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;&lt;/span&gt;&quot;</span><span class="p">)),</span><span class="nx">f</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="p">([</span><span class="s2">&quot;.less-error-message ul, .less-error-message li {&quot;</span><span class="p">,</span><span class="s2">&quot;list-style-type: none;&quot;</span><span class="p">,</span><span class="s2">&quot;margin-right: 15px;&quot;</span><span class="p">,</span><span class="s2">&quot;padding: 4px 0;&quot;</span><span class="p">,</span><span class="s2">&quot;margin: 0;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message label {&quot;</span><span class="p">,</span><span class="s2">&quot;font-size: 12px;&quot;</span><span class="p">,</span><span class="s2">&quot;margin-right: 15px;&quot;</span><span class="p">,</span><span class="s2">&quot;padding: 4px 0;&quot;</span><span class="p">,</span><span class="s2">&quot;color: #cc7777;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message pre {&quot;</span><span class="p">,</span><span class="s2">&quot;color: #ee4444;&quot;</span><span class="p">,</span><span class="s2">&quot;padding: 4px 0;&quot;</span><span class="p">,</span><span class="s2">&quot;margin: 0;&quot;</span><span class="p">,</span><span class="s2">&quot;display: inline-block;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message pre.ctx {&quot;</span><span class="p">,</span><span class="s2">&quot;color: #dd4444;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message h3 {&quot;</span><span class="p">,</span><span class="s2">&quot;font-size: 20px;&quot;</span><span class="p">,</span><span class="s2">&quot;font-weight: bold;&quot;</span><span class="p">,</span><span class="s2">&quot;padding: 15px 0 5px 0;&quot;</span><span class="p">,</span><span class="s2">&quot;margin: 0;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message a {&quot;</span><span class="p">,</span><span class="s2">&quot;color: #10a&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="s2">&quot;.less-error-message .error {&quot;</span><span class="p">,</span><span class="s2">&quot;color: red;&quot;</span><span class="p">,</span><span class="s2">&quot;font-weight: bold;&quot;</span><span class="p">,</span><span class="s2">&quot;padding-bottom: 2px;&quot;</span><span class="p">,</span><span class="s2">&quot;border-bottom: 1px dashed red;&quot;</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),{</span><span class="nx">title</span><span class="o">:</span><span class="s2">&quot;error-message&quot;</span><span class="p">}),</span><span class="nx">f</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cssText</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;font-family: Arial, sans-serif&quot;</span><span class="p">,</span><span class="s2">&quot;border: 1px solid #e00&quot;</span><span class="p">,</span><span class="s2">&quot;background-color: #eee&quot;</span><span class="p">,</span><span class="s2">&quot;border-radius: 5px&quot;</span><span class="p">,</span><span class="s2">&quot;-webkit-border-radius: 5px&quot;</span><span class="p">,</span><span class="s2">&quot;-moz-border-radius: 5px&quot;</span><span class="p">,</span><span class="s2">&quot;color: #e00&quot;</span><span class="p">,</span><span class="s2">&quot;padding: 15px&quot;</span><span class="p">,</span><span class="s2">&quot;margin-bottom: 15px&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">==</span><span class="s2">&quot;development&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">?</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">replaceChild</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">),</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">g</span><span class="p">))},</span><span class="mi">10</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">==</span><span class="s2">&quot;development&quot;</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">console</span><span class="o">!=</span><span class="s2">&quot;undefined&quot;</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;less: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">XMLHttpRequest</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;MSXML2.XMLHTTP.3.0&quot;</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;browser doesn&#39;t support AJAX.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">&gt;=</span><span class="mi">200</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">&lt;</span><span class="mi">300</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">responseText</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Last-Modified&quot;</span><span class="p">))</span><span class="o">:</span><span class="k">typeof</span> <span class="nx">d</span><span class="o">==</span><span class="s2">&quot;function&quot;</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">r</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">async</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">g</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">==</span><span class="s2">&quot;function&quot;</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">&quot;text/css&quot;</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;Accept&quot;</span><span class="p">,</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;text/x-less, text/css; q=0.9, */*; q=0.5&quot;</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">),</span><span class="nx">f</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">status</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">g</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="o">:</span><span class="nx">i</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?.*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;less:&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="o">||</span><span class="nx">o</span><span class="p">(</span><span class="nx">e</span><span class="p">));(</span><span class="nx">d</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">f</span><span class="p">))</span><span class="o">===</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">media</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">media</span><span class="o">||</span><span class="s2">&quot;screen&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;head&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">styleSheet</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">styleSheet</span><span class="p">.</span><span class="nx">cssText</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t reassign styleSheet.cssText.&quot;</span><span class="p">)}</span><span class="k">else</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeValue</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">replaceChild</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;saving &quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot; to cache.&quot;</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;:timestamp&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">o</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^[a-z]+:\/\/?[^\/]+/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?.*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\.[^\.\/]+$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^\.\w-]+/g</span><span class="p">,</span><span class="s2">&quot;-&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\./g</span><span class="p">,</span><span class="s2">&quot;:&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[#?].*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?.*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="s2">&quot;:timestamp&quot;</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">timestamp</span><span class="o">:</span><span class="nx">k</span><span class="p">};</span><span class="sr">/^(https?|file):/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;/&quot;</span><span class="o">?</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">+</span><span class="s2">&quot;//&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">host</span><span class="o">+</span><span class="nx">i</span><span class="o">:</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">i</span><span class="p">),</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">g</span><span class="p">)).</span><span class="nx">valueOf</span><span class="p">()</span><span class="o">===</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">)).</span><span class="nx">valueOf</span><span class="p">())</span><span class="nx">p</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">css</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">,{</span><span class="nx">local</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">remaining</span><span class="o">:</span><span class="nx">f</span><span class="p">});</span><span class="k">else</span> <span class="k">try</span><span class="p">{(</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Parser</span><span class="p">({</span><span class="nx">optimization</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">optimization</span><span class="p">,</span><span class="nx">paths</span><span class="o">:</span><span class="p">[</span><span class="nx">i</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\w\.-]+$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)],</span><span class="nx">mime</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">})).</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">try</span><span class="p">{</span><span class="nx">c</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,{</span><span class="nx">local</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">lastModified</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">remaining</span><span class="o">:</span><span class="nx">f</span><span class="p">}),</span><span class="nx">s</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;less-error-message:&quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">(</span><span class="nx">i</span><span class="p">)))}</span><span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="p">)}})}</span><span class="k">catch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">u</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">)}},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Couldn&#39;t load &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">)})}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">sheets</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;style&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">type</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Parser</span><span class="p">).</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">innerHTML</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()})}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">less</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]}</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">}),</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">)}),</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">}),</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}),</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">)</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">else</span> <span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="k">this</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">c</span><span class="o">++</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">));</span><span class="k">return</span> <span class="nx">d</span><span class="p">}),</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">||</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">+=</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">))</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="k">this</span><span class="p">[</span><span class="nx">c</span><span class="p">])</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}),</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">||</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}),</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">||</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s\s*/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s\s*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)});</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">==</span><span class="s2">&quot;undefined&quot;</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">exports</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">less</span><span class="o">==</span><span class="s2">&quot;undefined&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">less</span><span class="o">=</span><span class="p">{}),</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">less</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">less</span><span class="p">.</span><span class="nx">tree</span><span class="o">=</span><span class="p">{}),</span><span class="nx">d</span><span class="p">.</span><span class="nx">Parser</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">a</span><span class="o">==</span><span class="s2">&quot;string&quot;</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">])</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Function</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">parsers</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">==</span><span class="s2">&quot;string&quot;</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="p">();</span><span class="k">else</span><span class="p">{</span><span class="nx">r</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]))</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">c</span><span class="o">+=</span><span class="nx">g</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">!==</span><span class="mi">32</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">!==</span><span class="mi">10</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">!==</span><span class="mi">9</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">}</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">o</span><span class="p">)),</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">d</span><span class="o">==</span><span class="s2">&quot;string&quot;</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">d</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(){</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">k</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(){</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(){</span><span class="nx">g</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">o</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">imports</span><span class="o">=</span><span class="p">{</span><span class="nx">paths</span><span class="o">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">paths</span><span class="o">||</span><span class="p">[],</span><span class="nx">queue</span><span class="o">:</span><span class="p">[],</span><span class="nx">files</span><span class="o">:</span><span class="p">{},</span><span class="nx">mime</span><span class="o">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mime</span><span class="p">,</span><span class="nx">push</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">Parser</span><span class="p">.</span><span class="nx">importer</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paths</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">()},</span><span class="nx">a</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="k">this</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span><span class="s2">&quot;optimization&quot;</span><span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">optimization</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">filename</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">filename</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="nx">l</span><span class="o">=</span><span class="p">{</span><span class="nx">imports</span><span class="o">:</span><span class="nx">o</span><span class="p">,</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span><span class="nx">t</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="o">=</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\r\n/g</span><span class="p">,</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="sr">/[^&quot;&#39;`\{\}\/\(\)]+/g</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="sr">/\/\*(?:[^*]|\*+[^\/*])*\*+\/|\/\/.*/g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">=</span><span class="nx">l</span><span class="p">,(</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">===</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">+=</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="nx">k</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">),(</span><span class="nx">n</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="s2">&quot;*&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">===</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">+=</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">l</span><span class="p">)));</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;{&quot;</span><span class="o">&amp;&amp;!</span><span class="nx">k</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">)</span><span class="nx">g</span><span class="o">++</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;}&quot;</span><span class="o">&amp;&amp;!</span><span class="nx">k</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">)</span><span class="nx">g</span><span class="o">--</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">c</span><span class="p">[</span><span class="o">++</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;(&quot;</span><span class="o">&amp;&amp;!</span><span class="nx">k</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;)&quot;</span><span class="o">&amp;&amp;!</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="s1">&#39;&quot;&#39;</span><span class="o">||</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;&#39;&quot;</span><span class="o">||</span><span class="nx">m</span><span class="o">===</span><span class="s2">&quot;`&quot;</span><span class="p">)</span><span class="nx">k</span><span class="o">?</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">===</span><span class="nx">m</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">k</span><span class="o">:</span><span class="nx">k</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">throw</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;Syntax&quot;</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;Missing closing `}`&quot;</span><span class="p">,</span><span class="nx">filename</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">filename</span><span class="p">};</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)})}([[]]),</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">([],</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parsers</span><span class="p">.</span><span class="nx">primary</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">root</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">length</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="p">{},</span><span class="k">typeof</span> <span class="nx">h</span><span class="o">==</span><span class="s2">&quot;object&quot;</span><span class="o">&amp;&amp;!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Expression</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Expression</span><span class="p">([</span><span class="nx">b</span><span class="p">])),</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">([</span><span class="nx">b</span><span class="p">]));</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)}),</span><span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">h</span><span class="p">)]);</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,{</span><span class="nx">frames</span><span class="o">:</span><span class="nx">i</span><span class="p">}).</span><span class="nx">toCSS</span><span class="p">([],{</span><span class="nx">compress</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">compress</span><span class="o">||!</span><span class="mi">1</span><span class="p">})}</span><span class="k">catch</span><span class="p">(</span><span class="nx">k</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">m</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;\n&quot;</span><span class="p">;</span><span class="nx">l</span><span class="o">--</span><span class="p">)</span><span class="nx">m</span><span class="o">++</span><span class="p">;</span><span class="k">throw</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span><span class="nx">filename</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">filename</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">line</span><span class="o">:</span><span class="k">typeof</span> <span class="nx">d</span><span class="o">==</span><span class="s2">&quot;number&quot;</span><span class="o">?</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">callLine</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">callExtract</span><span class="o">:</span><span class="nx">f</span><span class="p">[</span><span class="nx">n</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">)],</span><span class="nx">stack</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span><span class="nx">column</span><span class="o">:</span><span class="nx">m</span><span class="p">,</span><span class="nx">extract</span><span class="o">:</span><span class="p">[</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">]]}}</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\s)+/g</span><span class="p">,</span><span class="s2">&quot;$1&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">}}(</span><span class="nx">h</span><span class="p">.</span><span class="nb">eval</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">w</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">v</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;\n&quot;</span><span class="p">;</span><span class="nx">v</span><span class="o">--</span><span class="p">)</span><span class="nx">w</span><span class="o">++</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;ParseError&quot;</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;Syntax Error on line &quot;</span><span class="o">+</span><span class="nx">p</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">filename</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">filename</span><span class="p">,</span><span class="nx">line</span><span class="o">:</span><span class="nx">p</span><span class="p">,</span><span class="nx">column</span><span class="o">:</span><span class="nx">w</span><span class="p">,</span><span class="nx">extract</span><span class="o">:</span><span class="p">[</span><span class="nx">q</span><span class="p">[</span><span class="nx">p</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="nx">p</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="nx">p</span><span class="p">]]}}</span><span class="k">this</span><span class="p">.</span><span class="nx">imports</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">g</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">h</span><span class="p">)}</span><span class="o">:</span><span class="nx">g</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">h</span><span class="p">)},</span><span class="nx">parsers</span><span class="o">:</span><span class="p">{</span><span class="nx">primary</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">while</span><span class="p">((</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">definition</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rule</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">directive</span><span class="p">))</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[\s\n]+/</span><span class="p">))</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">comment</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^\/\/.*/</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^\/\*(?:[^*]|\*+[^\/*])*\*+\/\n?/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">entities</span><span class="o">:</span><span class="p">{</span><span class="nx">quoted</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;~&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">++</span><span class="p">,</span><span class="nx">f</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span><span class="s1">&#39;&quot;&#39;</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;&#39;&quot;</span><span class="p">){</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;~&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^&quot;((?:[^&quot;\\\r\n]|\\.)*)&quot;|&#39;((?:[^&#39;\\\r\n]|\\.)*)&#39;/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">||</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="p">)}},</span><span class="nx">keyword</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[A-Za-z-]+/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">call</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="sr">/^([\w-]+|%)\(/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]))){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;url&quot;</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="nx">c</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;alpha&quot;</span><span class="p">)</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">);</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">arguments</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span><span class="k">return</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">arguments</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">)){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">literal</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">dimension</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)},</span><span class="nx">url</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;u&quot;</span><span class="o">&amp;&amp;!!</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^url\(/</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">dataURI</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[-\w%@$\/.&amp;=:;#+?~]+/</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;missing closing ) for url()&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">URL</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Variable</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">o</span><span class="p">.</span><span class="nx">paths</span><span class="p">)}},</span><span class="nx">dataURI</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^data:/</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">a</span><span class="p">.</span><span class="nx">mime</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[^\/]+\/[^,;)]+/</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">charset</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^;\s*charset=[^,;)]+/</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">base64</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^;\s*base64/</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^,\s*[^)]+/</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">}},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;@&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^@@?[\w-]+/</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Variable</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">color</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;#&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">])},</span><span class="nx">dimension</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">d</span><span class="o">&gt;</span><span class="mi">57</span><span class="o">||</span><span class="nx">d</span><span class="o">&lt;</span><span class="mi">45</span><span class="o">||</span><span class="nx">d</span><span class="o">===</span><span class="mi">47</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^(-?\d*\.?\d+)(px|%|em|pc|ex|in|deg|s|ms|pt|cm|mm|rad|grad|turn)?/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">])},</span><span class="nx">javascript</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;~&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">++</span><span class="p">,</span><span class="nx">f</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;`&quot;</span><span class="p">){</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;~&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^`([^`]*)`/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">JavaScript</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">)}}},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;@&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^(@[\w-]+)\s*:/</span><span class="p">)))</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]},</span><span class="nx">shorthand</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="nx">t</span><span class="p">(</span><span class="sr">/^[@\w.%-]+\/[@\w.-]+/</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Shorthand</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">mixin</span><span class="o">:</span><span class="p">{</span><span class="nx">call</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="s2">&quot;.&quot;</span><span class="o">||</span><span class="nx">i</span><span class="o">===</span><span class="s2">&quot;#&quot;</span><span class="p">){</span><span class="k">while</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[#.](?:[\w-]|\\(?:[a-fA-F0-9]{1,6} ?|[^a-fA-F0-9]))+/</span><span class="p">))</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">)),</span><span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;&gt;&quot;</span><span class="p">);</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">arguments</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;}&quot;</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">)}},</span><span class="nx">definition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;.&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;#&quot;</span><span class="o">||</span><span class="nx">t</span><span class="p">(</span><span class="sr">/^[^{]*(;|})/</span><span class="p">)))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^([#.](?:[\w-]|\\(?:[a-fA-F0-9]{1,6} ?|[^a-fA-F0-9]))+)\s*\(/</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">while</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">literal</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">keyword</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Variable</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">))</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">i</span><span class="p">});</span><span class="k">else</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected value&quot;</span><span class="p">);</span><span class="k">else</span> <span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="p">});</span><span class="k">else</span> <span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span><span class="nx">h</span><span class="p">});</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Expected )&quot;</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">)}}},</span><span class="nx">entity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">literal</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">keyword</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">javascript</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">)},</span><span class="nx">end</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;}&quot;</span><span class="p">)},</span><span class="nx">alpha</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^\(opacity=/i</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^\d+/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;missing closing ) for alpha()&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Alpha</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">element</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^(?:[.#]?|:*)(?:[\w-]|\\(?:[a-fA-F0-9]{1,6} ?|[^a-fA-F0-9]))+/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attribute</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^\([^)@]+\)/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^(?:\d*\.)?\d+%/</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="s2">&quot;&amp;&quot;</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="kc">null</span><span class="p">)},</span><span class="nx">combinator</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;&gt;&quot;</span><span class="o">||</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;+&quot;</span><span class="o">||</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;~&quot;</span><span class="p">){</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;&amp;&quot;</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;&amp;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="o">++</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;&amp; &quot;</span><span class="p">);</span><span class="k">while</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;:&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;:&quot;</span><span class="p">){</span><span class="nx">c</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="nx">c</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="s2">&quot;::&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="o">?</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="kc">null</span><span class="p">)},</span><span class="nx">selector</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">)){</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">===</span><span class="s2">&quot;{&quot;</span><span class="o">||</span><span class="nx">g</span><span class="o">===</span><span class="s2">&quot;}&quot;</span><span class="o">||</span><span class="nx">g</span><span class="o">===</span><span class="s2">&quot;;&quot;</span><span class="o">||</span><span class="nx">g</span><span class="o">===</span><span class="s2">&quot;,&quot;</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">f</span><span class="p">)},</span><span class="nx">tag</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="sr">/^[a-zA-Z][a-zA-Z-]*[0-9]?/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">)},</span><span class="nx">attribute</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;[&quot;</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[a-zA-Z-]+/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">))(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[|~*$^]?=/</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[\w-]+/</span><span class="p">))</span><span class="o">?</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">:</span><span class="nx">c</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;]&quot;</span><span class="p">))</span><span class="k">return</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">}},</span><span class="nx">block</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;{&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">primary</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;}&quot;</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">ruleset</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="nx">p</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="sr">/^([.#:% \w-]+)[\s\n]*\{/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]))</span><span class="nx">c</span><span class="o">+=</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Selector</span><span class="p">([</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])])];</span><span class="k">else</span> <span class="k">while</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">)){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">break</span><span class="p">;</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">q</span><span class="p">()},</span><span class="nx">rule</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">p</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">!==</span><span class="s2">&quot;.&quot;</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">!==</span><span class="s2">&quot;#&quot;</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">!==</span><span class="s2">&quot;&amp;&quot;</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">property</span><span class="p">)){</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot;@&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="sr">/^([^@+\/&#39;&quot;*`(;{}-]*);/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">]))</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">+=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;font&quot;</span><span class="o">?</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">font</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">q</span><span class="p">()}},</span><span class="s2">&quot;import&quot;</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^@import\s+/</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Import</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">)},</span><span class="nx">directive</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;@&quot;</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">]))</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^@media|@page/</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^@(?:-webkit-)?keyframes/</span><span class="p">)){</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[^{]+/</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^@[-a-z]+/</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;@font-face&quot;</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;;&quot;</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">font</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shorthand</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">while</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">)){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">value</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">)){</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">important</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;!&quot;</span><span class="p">)</span><span class="k">return</span> <span class="nx">s</span><span class="p">(</span><span class="sr">/^! *important/</span><span class="p">)},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">multiplication</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">operand</span><span class="p">)){</span><span class="k">while</span><span class="p">((</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">operand</span><span class="p">)))</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Operation</span><span class="p">(</span><span class="nx">c</span><span class="p">,[</span><span class="nx">d</span><span class="o">||</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">a</span><span class="p">}},</span><span class="nx">addition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplication</span><span class="p">)){</span><span class="k">while</span><span class="p">((</span><span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^[-+]\s+/</span><span class="p">)</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="s2">&quot; &quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;+&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">)))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplication</span><span class="p">)))</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Operation</span><span class="p">(</span><span class="nx">f</span><span class="p">,[</span><span class="nx">g</span><span class="o">||</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">g</span><span class="o">||</span><span class="nx">a</span><span class="p">}},</span><span class="nx">operand</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;-&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;@&quot;</span><span class="o">||</span><span class="nx">d</span><span class="o">===</span><span class="s2">&quot;(&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sub</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">dimension</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">call</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Operation</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">,[</span><span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">f</span><span class="p">])</span><span class="o">:</span><span class="nx">f</span><span class="p">},</span><span class="nx">expression</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">;</span><span class="k">while</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">addition</span><span class="p">)</span><span class="o">||</span><span class="nx">s</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="nx">c</span><span class="p">)},</span><span class="nx">property</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">s</span><span class="p">(</span><span class="sr">/^(\*?-?[-a-z_0-9]+)\s*:/</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]}}}},</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">!=</span><span class="s2">&quot;undefined&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Parser</span><span class="p">.</span><span class="nx">importer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">!==</span><span class="s2">&quot;/&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="p">({</span><span class="nx">href</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">title</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">type</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">mime</span><span class="p">},</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">)</span><span class="k">return</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">unit</span><span class="o">==</span><span class="s2">&quot;%&quot;</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">==</span><span class="s2">&quot;number&quot;</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="k">throw</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="s2">&quot;RuntimeError&quot;</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;color functions take numbers as parameters&quot;</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">functions</span><span class="p">.</span><span class="nx">hsla</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">l</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">a</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">functions</span><span class="o">=</span><span class="p">{</span><span class="nx">rgb</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rgba</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">rgba</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)}),</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="nx">hsl</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">hsla</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">hsla</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="mi">6</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="mi">6</span><span class="o">:</span><span class="nx">a</span><span class="o">*</span><span class="mi">2</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="o">*</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">?</span><span class="nx">g</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mi">6</span><span class="o">:</span><span class="nx">g</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">%</span><span class="mi">360</span><span class="o">/</span><span class="mi">360</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">&lt;=</span><span class="p">.</span><span class="mi">5</span><span class="o">?</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="o">+</span><span class="nx">b</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rgba</span><span class="p">(</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">e</span><span class="p">)},</span><span class="nx">hue</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">h</span><span class="p">))},</span><span class="nx">saturation</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">s</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="s2">&quot;%&quot;</span><span class="p">)},</span><span class="nx">lightness</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">l</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="s2">&quot;%&quot;</span><span class="p">)},</span><span class="nx">alpha</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">a</span><span class="p">)},</span><span class="nx">saturate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">desaturate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">-=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">s</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">lighten</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">darken</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="o">-=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">fadein</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">fadeout</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">-=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">spin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">%</span><span class="mi">360</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">360</span><span class="o">+</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">)},</span><span class="nx">mix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">a</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">((</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="o">==-</span><span class="mi">1</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">i</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">alpha</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">alpha</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">k</span><span class="p">)},</span><span class="nx">greyscale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">desaturate</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="mi">100</span><span class="p">))},</span><span class="nx">e</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">JavaScript</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">evaluated</span><span class="o">:</span><span class="nx">b</span><span class="p">)},</span><span class="nx">escape</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nb">encodeURI</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/=/g</span><span class="p">,</span><span class="s2">&quot;%3D&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/:/g</span><span class="p">,</span><span class="s2">&quot;%3A&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#/g</span><span class="p">,</span><span class="s2">&quot;%23&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/;/g</span><span class="p">,</span><span class="s2">&quot;%3B&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\(/g</span><span class="p">,</span><span class="s2">&quot;%28&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)/g</span><span class="p">,</span><span class="s2">&quot;%29&quot;</span><span class="p">))},</span><span class="s2">&quot;%&quot;</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%[sda]/i</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/s/i</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">value</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">toCSS</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[A-Z]$/</span><span class="p">)</span><span class="o">?</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">});</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%%/g</span><span class="p">,</span><span class="s2">&quot;%&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s1">&#39;&quot;&#39;</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">round</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">unit</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">==</span><span class="s2">&quot;number&quot;</span><span class="p">)</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">throw</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="s2">&quot;RuntimeError&quot;</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;math functions take numbers as parameters&quot;</span><span class="p">}}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Alpha</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Alpha</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;alpha(opacity=&quot;</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">||</span><span class="nx">a</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Call</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">c</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Call</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)});</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">functions</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">functions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">functions</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;error evaluating function `&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;`&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">()}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="o">=</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">6</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/.{2}/g</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">16</span><span class="p">)})</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">8</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="mi">16</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/.{2}/g</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">16</span><span class="p">)}))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="mi">16</span><span class="p">)}),</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">==</span><span class="s2">&quot;number&quot;</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="s2">&quot;rgba(&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">)}).</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="o">:</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)},</span><span class="nx">operate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">toColor</span><span class="p">());</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">alpha</span><span class="p">)},</span><span class="nx">toHSL</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">f</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="o">&gt;</span><span class="p">.</span><span class="mi">5</span><span class="o">?</span><span class="nx">j</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">case</span> <span class="nx">a</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="mi">6</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">b</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="o">+</span><span class="mi">4</span><span class="p">}</span><span class="nx">g</span><span class="o">/=</span><span class="mi">6</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="nx">g</span><span class="o">*</span><span class="mi">360</span><span class="p">,</span><span class="nx">s</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">a</span><span class="o">:</span><span class="nx">d</span><span class="p">}}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Comment</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">silent</span><span class="o">=!!</span><span class="nx">b</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Comment</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="kc">null</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toColor</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">])},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">operate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">unit</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Directive</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">([],</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Directive</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nx">root</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;{&quot;</span><span class="o">:</span><span class="s2">&quot; {\n  &quot;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">trim</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">,</span><span class="s2">&quot;\n  &quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;}&quot;</span><span class="o">:</span><span class="s2">&quot;\n}\n&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;;\n&quot;</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">variable</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">find</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Element</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Combinator</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Element</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="p">{})</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Combinator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot; &quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="s2">&quot; &quot;</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="s2">&quot;&amp; &quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="s2">&quot;&amp; &quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot; &quot;</span><span class="o">:</span><span class="s2">&quot; &quot;</span><span class="p">,</span><span class="s2">&quot;&amp;&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;&amp; &quot;</span><span class="o">:</span><span class="s2">&quot; &quot;</span><span class="p">,</span><span class="s2">&quot;:&quot;</span><span class="o">:</span><span class="s2">&quot; :&quot;</span><span class="p">,</span><span class="s2">&quot;::&quot;</span><span class="o">:</span><span class="s2">&quot;::&quot;</span><span class="p">,</span><span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="s2">&quot; + &quot;</span><span class="p">,</span><span class="s2">&quot;~&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;~&quot;</span><span class="o">:</span><span class="s2">&quot; ~ &quot;</span><span class="p">,</span><span class="s2">&quot;&gt;&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;&gt;&quot;</span><span class="o">:</span><span class="s2">&quot; &gt; &quot;</span><span class="p">}[</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">]}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Expression</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Expression</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Import</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_path</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="sr">/\.(le?|c)ss$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="s2">&quot;.less&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">value</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="o">=</span><span class="sr">/css$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Error parsing &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">path</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">})},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Import</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="o">?</span><span class="s2">&quot;@import &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_path</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;;\n&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Import</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)));</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">JavaScript</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">escaped</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">JavaScript</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{},</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@\{([\w-]+)\}/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">jsify</span><span class="p">((</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Variable</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">)).</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">))});</span><span class="k">try</span><span class="p">{</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;return (&quot;</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;JavaScript evaluation error: `&quot;</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;`&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span> <span class="k">in</span> <span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">variables</span><span class="p">())</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">variables</span><span class="p">()[</span><span class="nx">h</span><span class="p">].</span><span class="nx">value</span><span class="p">,</span><span class="nx">toJS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">()}};</span><span class="k">try</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;JavaScript evaluation error: &#39;&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">message</span><span class="o">+</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">c</span><span class="o">==</span><span class="s2">&quot;string&quot;</span><span class="o">?</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="s1">&#39;&quot;&#39;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s1">&#39;&quot;&#39;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">escaped</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="o">:</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">?</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">))</span><span class="o">:</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">c</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Keyword</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="o">=</span><span class="p">{},</span><span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">d</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">((</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">find</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">)).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">)});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="k">try</span><span class="p">{</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">).</span><span class="nx">rules</span><span class="p">),</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">stack</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span><span class="nx">call</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;No matching definition was found for `&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)`&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot; is undefined&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}},</span><span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">([</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">)])],</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="o">=</span><span class="p">{},</span><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">frames</span><span class="o">=</span><span class="p">[]},</span><span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">variable</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">variables</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">variables</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">find</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,[]),</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">value</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)));</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;wrong number of arguments for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="s2">&quot; for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">value</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="s2">&quot;@arguments&quot;</span><span class="p">,(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="nx">f</span><span class="p">)).</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)));</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">))).</span><span class="nb">eval</span><span class="p">({</span><span class="nx">frames</span><span class="o">:</span><span class="p">[</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">frames</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">)})},</span><span class="nx">match</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">())</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Operation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">trim</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Operation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nb">eval</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Dimension</span><span class="o">&amp;&amp;</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Color</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">===</span><span class="s2">&quot;*&quot;</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">===</span><span class="s2">&quot;+&quot;</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;OperationError&quot;</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;Can&#39;t substract or divide a color from a number&quot;</span><span class="p">};</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">operate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span><span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;-&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;*&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">case</span><span class="s2">&quot;/&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="o">/</span><span class="nx">c</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">escaped</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quote</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">d</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">escaped</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">quote</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">quote</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/`([^`]+)`/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">JavaScript</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)).</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">value</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/@\{([\w-]+)\}/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Variable</span><span class="p">(</span><span class="s2">&quot;@&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="p">)).</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">value</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()});</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">quote</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">quote</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">escaped</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Value</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Value</span><span class="p">([</span><span class="nx">c</span><span class="p">]),</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;@&quot;</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="o">=!</span><span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;:&quot;</span><span class="o">:</span><span class="s2">&quot;: &quot;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="o">+</span><span class="s2">&quot;;&quot;</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nb">eval</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Shorthand</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Shorthand</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="o">=</span><span class="p">{}},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="nx">c</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Import</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">frames</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nb">eval</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">match</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="p">},</span><span class="nx">variables</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Rule</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">variable</span><span class="o">===!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},{})},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">variables</span><span class="p">()[</span><span class="nx">a</span><span class="p">]},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ruleset</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">})},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">[</span><span class="nx">g</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">!==</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">selectors</span><span class="p">[</span><span class="nx">g</span><span class="p">])){</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">break</span><span class="p">}});</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">]})</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">joinSelectors</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">i</span><span class="p">.</span><span class="nx">rules</span><span class="o">||</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Directive</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Comment</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">silent</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">c</span><span class="p">)))</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">.</span><span class="nx">variable</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">value</span><span class="o">&amp;&amp;!</span><span class="nx">i</span><span class="p">.</span><span class="nx">variable</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="s2">&quot;\n&quot;</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">c</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">trim</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;,&quot;</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">?</span><span class="s2">&quot;,\n&quot;</span><span class="o">:</span><span class="s2">&quot;, &quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">,(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;{&quot;</span><span class="o">:</span><span class="s2">&quot; {\n  &quot;</span><span class="p">)</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="s2">&quot;\n  &quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;}&quot;</span><span class="o">:</span><span class="s2">&quot;\n}\n&quot;</span><span class="p">))),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;\n&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)},</span><span class="nx">joinSelectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">joinSelector</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">])},</span><span class="nx">joinSelector</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">j</span><span class="p">.</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="s2">&quot;&amp;&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">i</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">i</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[]),</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">g</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">h</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">l</span><span class="p">]).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">f</span><span class="p">))}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">value</span><span class="o">===</span><span class="s2">&quot;&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="s2">&quot; &quot;</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">match</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Selector</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">b</span><span class="o">==</span><span class="s2">&quot;string&quot;</span><span class="o">?</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">URL</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">data</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="o">=</span><span class="nx">b</span><span class="o">:</span><span class="p">(</span><span class="o">!</span><span class="sr">/^(?:https?:\/|file:\/|data:\/)?\//</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">!=</span><span class="s2">&quot;undefined&quot;</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">===</span><span class="s2">&quot;/&quot;</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paths</span><span class="o">=</span><span class="nx">c</span><span class="p">)},</span><span class="nx">b</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;url(&quot;</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="o">?</span><span class="s2">&quot;data:&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span></div><div class='line' id='LC16'><span class="p">.</span><span class="nx">mime</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">charset</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">base64</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">data</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">())</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">attrs</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="k">new</span> <span class="nx">b</span><span class="p">.</span><span class="nx">URL</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">paths</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Value</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">is</span><span class="o">=</span><span class="s2">&quot;value&quot;</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Value</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">a</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">&quot;,&quot;</span><span class="o">:</span><span class="s2">&quot;, &quot;</span><span class="p">)}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Variable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Variable</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;@@&quot;</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;@&quot;</span><span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Variable</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))).</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">value</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">variable</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;variable &quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot; is undefined&quot;</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}}}}(</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">)),</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">).</span><span class="nx">find</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]))</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="p">},</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;less/tree&quot;</span><span class="p">).</span><span class="nx">jsify</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;, &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">&quot;file:&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">&quot;chrome:&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">&quot;chrome-extension:&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">&quot;resource:&quot;</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">||</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">&quot;127.0.0.1&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">&quot;localhost&quot;</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">port</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">f</span><span class="o">?</span><span class="s2">&quot;development&quot;</span><span class="o">:</span><span class="s2">&quot;production&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">async</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">poll</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">poll</span><span class="o">||</span><span class="p">(</span><span class="nx">f</span><span class="o">?</span><span class="mi">1</span><span class="nx">e3</span><span class="o">:</span><span class="mi">1500</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">watch</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">unwatch</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">===</span><span class="s2">&quot;development&quot;</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="sr">/!watch/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">watch</span><span class="p">(),</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchTimer</span><span class="o">=</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">lastModified</span><span class="p">)})},</span><span class="nx">d</span><span class="p">.</span><span class="nx">poll</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">localStorage</span><span class="o">==</span><span class="s2">&quot;undefined&quot;</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;link&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="sr">/^text\/(x-)?less$/</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">sheets</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)(</span><span class="nx">i</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">rel</span><span class="o">===</span><span class="s2">&quot;stylesheet/less&quot;</span><span class="o">||</span><span class="nx">i</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">rel</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/stylesheet/</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">[</span><span class="nx">k</span><span class="p">].</span><span class="nx">type</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">j</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">refresh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">,</span><span class="nx">m</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">local</span><span class="o">?</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;loading &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">&quot; from cache.&quot;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;parsed &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">&quot; successfully.&quot;</span><span class="p">),</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastModified</span><span class="p">)),</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;css for &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">&quot; generated in &quot;</span><span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;ms&quot;</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">remaining</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">(</span><span class="s2">&quot;css generated in &quot;</span><span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;ms&quot;</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">},</span><span class="nx">a</span><span class="p">),</span><span class="nx">l</span><span class="p">()},</span><span class="nx">d</span><span class="p">.</span><span class="nx">refreshStyles</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">refresh</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">env</span><span class="o">===</span><span class="s2">&quot;development&quot;</span><span class="p">)})(</span><span class="nb">window</span><span class="p">)</span></div></pre></div>
              
            
          </td>
        </tr>
      </table>
    
  </div>


          </div>
        </div>
      </div>
    </div>
  

  </div>


<div class="frame frame-loading" style="display:none;" data-tree-list-url="/cloudhead/less.js/tree-list/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525" data-blob-url-prefix="/cloudhead/less.js/blob/7739fb133a2f27fb5e3e2a6c62cf0c76c4c87525">
  <img src="https://a248.e.akamai.net/assets.github.com/images/modules/ajax/big_spinner_336699.gif" height="32" width="32">
</div>

    </div>
  
      
    </div>

    <!-- footer -->
    <div id="footer" >
       <div class="upper_footer">
   <div class="site" class="clearfix">

     <!--[if IE]><h4 id="blacktocat_ie">GitHub Links</h4><![endif]-->
     <![if !IE]><h4 id="blacktocat">GitHub Links</h4><![endif]>

     <ul class="footer_nav">
       <h4>GitHub</h4>
       <li><a href="https://github.com/about">About</a></li>
       <li><a href="https://github.com/blog">Blog</a></li>
       <li><a href="https://github.com/features">Features</a></li>
       <li><a href="https://github.com/contact">Contact &amp; Support</a></li>
       <li><a href="https://github.com/training">Training</a></li>
       <li><a href="http://status.github.com/">Site Status</a></li>
     </ul>

     <ul class="footer_nav">
       <h4>Tools</h4>
       <li><a href="http://mac.github.com/">GitHub for Mac</a></li>
       <li><a href="http://mobile.github.com/">Issues for iPhone</a></li>
       <li><a href="https://gist.github.com">Gist: Code Snippets</a></li>
       <li><a href="http://fi.github.com/">Enterprise Install</a></li>
       <li><a href="http://jobs.github.com/">Job Board</a></li>
     </ul>

     <ul class="footer_nav">
       <h4>Extras</h4>
       <li><a href="http://shop.github.com/">GitHub Shop</a></li>
       <li><a href="http://octodex.github.com/">The Octodex</a></li>
     </ul>

     <ul class="footer_nav">
       <h4>Documentation</h4>
       <li><a href="http://help.github.com/">GitHub Help</a></li>
       <li><a href="http://developer.github.com/">Developer API</a></li>
       <li><a href="http://github.github.com/github-flavored-markdown/">GitHub Flavored Markdown</a></li>
       <li><a href="http://pages.github.com/">GitHub Pages</a></li>
     </ul>

   </div><!-- /.site -->
 </div><!-- /.upper_footer -->

 <div class="lower_footer">
  <div class="site" class="clearfix">
    <!--[if IE]><div id="legal_ie"><![endif]-->
    <![if !IE]><div id="legal"><![endif]>
      <ul>
        <li><a href="https://github.com/site/terms">Terms of Service</a></li>
        <li><a href="https://github.com/site/privacy">Privacy</a></li>
        <li><a href="https://github.com/security">Security</a></li>
      </ul>

      <p>&copy; 2011 <span id="_rrt" title="0.04529s from fe7.rs.github.com">GitHub</span> Inc. All rights reserved.</p>
    </div><!-- /#legal or /#legal_ie-->

    
      <div class="sponsor">
        <a href="http://www.rackspace.com" class="logo">
          <img alt="Dedicated Server" height="36" src="https://a248.e.akamai.net/assets.github.com/images/modules/footer/rackspace_logo.png?v2" width="38" />
        </a>
        Powered by the <a href="http://www.rackspace.com ">Dedicated
        Servers</a> and<br/> <a href="http://www.rackspacecloud.com">Cloud
        Computing</a> of Rackspace Hosting<span>&reg;</span>
      </div>
    
  </div><!-- /.site -->
</div><!-- /.lower_footer -->

    </div><!-- /#footer -->

    

<div id="keyboard_shortcuts_pane" class="instapaper_ignore readability-extra" style="display:none">
  <h2>Keyboard Shortcuts <small><a href="#" class="js-see-all-keyboard-shortcuts">(see all)</a></small></h2>

  <div class="columns threecols">
    <div class="column first">
      <h3>Site wide shortcuts</h3>
      <dl class="keyboard-mappings">
        <dt>s</dt>
        <dd>Focus site search</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>?</dt>
        <dd>Bring up this help dialog</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column middle" style='display:none'>
      <h3>Commit list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selected down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selected up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>c <em>or</em> o <em>or</em> enter</dt>
        <dd>Open commit</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>y</dt>
        <dd>Expand URL to its canonical form</dd>
      </dl>
    </div><!-- /.column.first -->

    <div class="column last" style='display:none'>
      <h3>Pull request list</h3>
      <dl class="keyboard-mappings">
        <dt>j</dt>
        <dd>Move selected down</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>k</dt>
        <dd>Move selected up</dd>
      </dl>
      <dl class="keyboard-mappings">
        <dt>o <em>or</em> enter</dt>
        <dd>Open issue</dd>
      </dl>
    </div><!-- /.columns.last -->

  </div><!-- /.columns.equacols -->

  <div style='display:none'>
    <div class="rule"></div>

    <h3>Issues</h3>

    <div class="columns threecols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt>j</dt>
          <dd>Move selected down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>k</dt>
          <dd>Move selected up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>x</dt>
          <dd>Toggle select target</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>o <em>or</em> enter</dt>
          <dd>Open issue</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column middle">
        <dl class="keyboard-mappings">
          <dt>I</dt>
          <dd>Mark selected as read</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>U</dt>
          <dd>Mark selected as unread</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>e</dt>
          <dd>Close selected</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>y</dt>
          <dd>Remove selected from view</dd>
        </dl>
      </div><!-- /.column.middle -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>c</dt>
          <dd>Create issue</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Create label</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>i</dt>
          <dd>Back to inbox</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>u</dt>
          <dd>Back to issues</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>/</dt>
          <dd>Focus issues search</dd>
        </dl>
      </div>
    </div>
  </div>

  <div style='display:none'>
    <div class="rule"></div>

    <h3>Network Graph</h3>
    <div class="columns equacols">
      <div class="column first">
        <dl class="keyboard-mappings">
          <dt><span class="badmono">←</span> <em>or</em> h</dt>
          <dd>Scroll left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">→</span> <em>or</em> l</dt>
          <dd>Scroll right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↑</span> <em>or</em> k</dt>
          <dd>Scroll up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt><span class="badmono">↓</span> <em>or</em> j</dt>
          <dd>Scroll down</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Toggle visibility of head labels</dd>
        </dl>
      </div><!-- /.column.first -->
      <div class="column last">
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">←</span> <em>or</em> shift h</dt>
          <dd>Scroll all the way left</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">→</span> <em>or</em> shift l</dt>
          <dd>Scroll all the way right</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↑</span> <em>or</em> shift k</dt>
          <dd>Scroll all the way up</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>shift <span class="badmono">↓</span> <em>or</em> shift j</dt>
          <dd>Scroll all the way down</dd>
        </dl>
      </div><!-- /.column.last -->
    </div>
  </div>

  <div >
    <div class="rule"></div>
    <div class="columns threecols">
      <div class="column first" >
        <h3>Source Code Browsing</h3>
        <dl class="keyboard-mappings">
          <dt>t</dt>
          <dd>Activates the file finder</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>l</dt>
          <dd>Jump to line</dd>
        </dl>
        <dl class="keyboard-mappings">
          <dt>y</dt>
          <dd>Expand URL to its canonical form</dd>
        </dl>
      </div>
    </div>
  </div>
</div>

    <div id="markdown-help" class="instapaper_ignore readability-extra">
  <h2>Markdown Cheat Sheet</h2>

  <div class="cheatsheet-content">

  <div class="mod">
    <div class="col">
      <h3>Format Text</h3>
      <p>Headers</p>
      <pre>
# This is an &lt;h1&gt; tag
## This is an &lt;h2&gt; tag
###### This is an &lt;h6&gt; tag</pre>
     <p>Text styles</p>
     <pre>
*This text will be italic*
_This will also be italic_
**This text will be bold**
__This will also be bold__

*You **can** combine them*
</pre>
    </div>
    <div class="col">
      <h3>Lists</h3>
      <p>Unordered</p>
      <pre>
* Item 1
* Item 2
  * Item 2a
  * Item 2b</pre>
     <p>Ordered</p>
     <pre>
1. Item 1
2. Item 2
3. Item 3
   * Item 3a
   * Item 3b</pre>
    </div>
    <div class="col">
      <h3>Miscellaneous</h3>
      <p>Images</p>
      <pre>
![GitHub Logo](/images/logo.png)
Format: ![Alt Text](url)
</pre>
     <p>Links</p>
     <pre>
http://github.com - automatic!
[GitHub](http://github.com)</pre>
<p>Blockquotes</p>
     <pre>
As Kanye West said:
> We're living the future so
> the present is our past.
</pre>
    </div>
  </div>
  <div class="rule"></div>

  <h3>Code Examples in Markdown</h3>
  <div class="col">
      <p>Syntax highlighting with <a href="http://github.github.com/github-flavored-markdown/" title="GitHub Flavored Markdown" target="_blank">GFM</a></p>
      <pre>
```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```</pre>
    </div>
    <div class="col">
      <p>Or, indent your code 4 spaces</p>
      <pre>
Here is a Python code example
without syntax highlighting:

    def foo:
      if not bar:
        return true</pre>
    </div>
    <div class="col">
      <p>Inline code for comments</p>
      <pre>
I think you should use an
`&lt;addr&gt;` element here instead.</pre>
    </div>
  </div>

  </div>
</div>
    

    <div class="context-overlay"></div>

    
    
    
    <script type="text/javascript">(function(){var d=document;var e=d.createElement("script");e.async=true;e.src="https://d1ros97qkrwjf5.cloudfront.net/19/eum/rum.js";e.type="text/javascript";var s=d.getElementsByTagName("script")[0];s.parentNode.insertBefore(e,s);})();NREUMQ.push(["nrf2","beacon-1.newrelic.com","2f94e4d8c2",64799,"dw1bEBZcX1RWRhoEClsAGhcMXEQ=",0,43,new Date().getTime()])</script>
  </body>
</html>

